package com.team113.plagiarismdetector.ast;

import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.HashMap;
import java.util.Map;

public class PythonParser extends Python3BaseListener {

    private Map<Integer,Integer> cateMap;
    private Map<Integer,Map<String,String>> lcsMap;

    /**
     * This constructor initializes the private variables
     */
    public PythonParser(){
        cateMap = new HashMap<>();
        lcsMap = new HashMap<>();
    }

    /**
     * This method is used to parse the AST by visiting the terminal nodes
     * @param node the root node from which the terminal node is to be fetched
     */
    @Override
    public void visitTerminal(TerminalNode node) {

        int tokenIndex = node.getSymbol().getTokenIndex();
        int tokenType = node.getSymbol().getType();
        int lineNum = node.getSymbol().getLine();
        HashMap tokenInfo = new HashMap();
        tokenInfo.put("type","" + tokenType);
        tokenInfo.put("lineNum", "" + lineNum);
        if (this.cateMap.containsKey(tokenType)){
            int curVal = cateMap.get(tokenType);
            curVal += 1;
            cateMap.put(tokenType,curVal);
        } else{
            cateMap.put(tokenType, 1);
        }
        lcsMap.put(tokenIndex,tokenInfo);
    }

    /**
     * This getter is used to fetch the Category mapping generated by parsing the AST
     * @return the Category mapping by parsing AST
     */
    public Map<Integer, Integer> getCateMap() {
        return cateMap;
    }

    /**
     * This getter is used to fetch the LCS mapping generated by parsing the AST
     * @return the LCS mapping by parsing AST
     */
    public Map<Integer, Map<String, String>> getLcsMap() {
        return lcsMap;
    }
}
